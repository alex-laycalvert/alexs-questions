import { useEffect, useState } from "react";
import Head from "next/head";
import styles from "@/styles/Home.module.css";
import type { Poll } from "@/models/Poll";

export default function Home() {
    const [poll, setPoll] = useState<Poll | null>(null);
    const [answer, setAnswer] = useState<string>("");

    const fetchPoll = async () => {
        const response = await fetch("/api/poll").then((res) => res.json());
        if (!response._id) {
            return;
        }
        setPoll(response);
    };

    const capitalize = (str: string) => {
        if (!str || str.length <= 0) {
            return "";
        }
        return str[0].toUpperCase() + str.slice(1);
    };

    const pluralize = (count: number) => {
        return count === 1 ? "vote" : "vote";
    };

    const percentage = (count: number): number => {
        if (!poll) {
            return 0;
        }
        const totalAnswers = Object.values(poll.answers).reduce(
            (total, a) => total + a.count,
            0
        );
        if (totalAnswers <= 0) {
            return 0;
        }
        return (count / totalAnswers) * 100;
    };

    const submitAnswer = async (str: string) => {
        if (!poll) {
            return;
        }
        window.localStorage.setItem("answer", str);
        if (answer.length <= 0) {
            await fetch(`/api/poll?id=${poll._id}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ answer: str }),
            });
        } else if (answer === str) {
            await fetch(`/api/poll?id=${poll._id}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ from: str }),
            });
        } else {
            await fetch(`/api/poll?id=${poll._id}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ from: answer, to: str }),
            });
        }
        setAnswer(answer === str ? "" : str);
    };

    useEffect(() => {
        if (!window.localStorage.getItem("answer")) {
            window.localStorage.setItem("answer", answer);
        }
        setAnswer(window.localStorage.getItem("answer") ?? "");
    }, []);

    useEffect(() => {
        fetchPoll();
    }, [answer]);

    if (!poll) {
        return <></>;
    }

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
                <div className={styles.pollBox}>
                    <h1 className={styles.pollName}>{poll.name}</h1>
                    <p className={styles.pollDescription}>{poll.description}</p>
                    <div className={styles.answersContainer}>
                        {poll.answers.map((a) => (
                            <button
                                className={`${styles.answerButton} ${
                                    a.key === answer ? styles.selected : ""
                                }`}
                                key={a.key}
                                onClick={() => submitAnswer(a.key)}
                            >
                                <div>
                                    <b>{capitalize(a.key)}</b>
                                </div>
                                {answer.length > 0 && (
                                    <div className={styles.answerStats}>
                                        <div className={styles.votes}>
                                            {a.count}&nbsp;
                                            {pluralize(a.count)}
                                        </div>
                                        <div className={styles.percentage}>
                                            <div
                                                className={
                                                    styles.percentageFill
                                                }
                                                style={{
                                                    width: percentage(a.count) + '%',
                                                }}
                                            ></div>
                                        </div>
                                        <div className={styles.percentageText}>
                                            <b>{percentage(a.count).toFixed(2)}%</b>
                                        </div>
                                    </div>
                                )}
                            </button>
                        ))}
                    </div>
                </div>
            </main>
        </>
    );
}
